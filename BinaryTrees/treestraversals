import java.util.*;
class Node{
    int data;
    Node right;
    Node left;
    Node(int data){
        this.data = data;
        this.right = null;
        this.left = null;
    }

}

public class Treeimplementation {
    static void inorder(Node root){
       if(root!=null) {
           inorder(root.left);
           System.out.print(" " + root.data);
           inorder(root.right);
       }
    }
    static void preorder(Node root){
        if(root!=null){
            System.out.print(" "+root.data);
            preorder(root.left);
            preorder(root.right);
        }
    }
    static void postorder(Node root){
        if(root!=null){
            postorder(root.left);
            postorder(root.right);
            System.out.print(" "+root.data);
        }
    }
    static void levelOrder(Node root){
        if(root == null) return;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        while(!q.isEmpty()){
            Node currNode = q.remove();
            if(currNode==null){
                System.out.println();
                if(q.isEmpty()){
                    break;
                }else{
                    q.add(null);
                }
            } else{
                System.out.print(currNode.data+" ");
                if(currNode.left!=null){
                    q.add(currNode.left);
                }
                if(currNode.right!=null){
                    q.add(currNode.right);
                }
            }
        }
    }
    public static void main(String[] args) {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        System.out.println("InOrder");
        inorder(root);
        System.out.println();
        System.out.println("PreOrder");
        preorder(root);
        System.out.println();
        System.out.println("PostOrder");
        postorder(root);
        System.out.println();
        System.out.println("Levelorder");
        levelOrder(root);
    }
}
