class Solution {

    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        List<List<int[]>> adj = new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int[] edg:edges){
            int u = edg[0];
            int v = edg[1];
            int w = edg[2];
            adj.get(u).add(new int[]{v,w});
        }
        int[] indegree = new int[V];
        for(int i=0;i<V;i++){
            for(int[] edg:adj.get(i)){
               int v = edg[0];
               indegree[v]++;
            }
        }
        Queue<Integer>q = new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        List<Integer> topoorder =new ArrayList<>();
        while(!q.isEmpty()){
            int u = q.poll();
            topoorder.add(u);
            for(int[] edg : adj.get(u)){
                int v = edg[0];
                indegree[v]--;
                if(indegree[v]==0){
                    q.add(v);
                }
            }
        }
     
        int[] dist = new int[V];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[0] = 0;
        for(int it:topoorder){
            if(dist[it]!=Integer.MAX_VALUE){
            for(int[] edg:adj.get(it)){
                int v = edg[0];
                int w = edg[1];
                if(dist[v]>dist[it]+w){
                    dist[v] = dist[it]+w;
                }
            }
            }
        }
        int[] res = new int[V];
        for(int i=0;i<V;i++){
            res[i] = dist[i]==Integer.MAX_VALUE?-1:dist[i];
        }
        return res;
    }
}
