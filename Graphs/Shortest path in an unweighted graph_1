import java.util.*;
public class Solution {

	public static LinkedList<Integer> shortestPath(int[][] edges, int n, int m, int s, int t) {
		// Write your code here.
		List<List<Integer>> adj = new ArrayList<>();
		for(int i=0;i<=n;i++){
			adj.add(new ArrayList<>());
		}
		for(int[] edg:edges){
			int u = edg[0];
			int v = edg[1];
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		int[] vis = new int[n+1];
		int[] par = new int[n+1];
		LinkedList<Integer> ans = new LinkedList<>();
        Arrays.fill(vis,0);
		Arrays.fill(par,-1);
		Queue<Integer>q = new LinkedList<>();
		vis[s] = 1;
		par[s]=-1;
		q.add(s);
		while(!q.isEmpty()){
          int curr = q.poll();
		  for(int neigh:adj.get(curr)){
			  if(vis[neigh]==0){
				  vis[neigh] = 1;
				  par[neigh] = curr;
				  q.add(neigh);
			  }
		  }
		  if(curr==t) break;
		}
		int temp = t;
		while(temp!=-1){
			ans.addFirst(temp);
			temp = par[temp];
		}
		return ans;
		
	}

}
