class Solution {
    public int longestCycle(int[] edges) {
        int n = edges.length;
        int[] indegree = new int[n];
        for(int i=0;i<n;i++){
            if(edges[i]!=-1){
                indegree[edges[i]]++;
            }
        }
        Queue<Integer>q = new LinkedList<>();
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        boolean[] vis = new boolean[n+1];
        while(!q.isEmpty()){
            int curr = q.poll();
            vis[curr] = true;
            if(edges[curr]!=-1){
                indegree[edges[curr]]--;
                if(indegree[edges[curr]]==0){
                   q.add(edges[curr]);
                }
            }
        }
        int maxcycle = -1;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                int cyclelen = 0;
                int curre = i;
                while(!vis[curre]){
                    vis[curre] = true;
                    curre = edges[curre];
                    cyclelen++;
                }
                if(cyclelen>maxcycle){
                    maxcycle = cyclelen;
                }
            }
        }
        return maxcycle;

    }
}
