class Solution {
    public boolean isCyclic(int V, int[][] edges) {
        // code here
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int[] edge:edges){
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
        }
        boolean[] visit = new boolean[V];
        boolean[] pathvis = new boolean[V];
        for(int i=0;i<V;i++){
            if(!visit[i]){
                if(dfs(i,adj,visit,pathvis)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(int v,List<List<Integer>> adj,boolean[] vis,boolean[] pathvis){
        vis[v] = true;
        pathvis[v] = true;
        for(int neighb:adj.get(v)){
            if(!vis[neighb]){
            if(dfs(neighb,adj,vis,pathvis)){
                return true;
            }
            }else if(pathvis[neighb]){
                return true;
            }
        }
        pathvis[v] = false;
        return false;
        
    }
}
